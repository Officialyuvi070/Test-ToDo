name: To-Do Pipeline
on:
  push

jobs:
  # Snyk:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@master

  #     - name: Run Snyk on backend
  #       uses: snyk/actions/node@master
  #       continue-on-error: true
  #       with:
  #         args: --file=./backend/package.json  # Specify the path to the backend package.json
  #         command: monitor
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  #     - name: Run Snyk on frontend
  #       uses: snyk/actions/node@master
  #       continue-on-error: true
  #       with:
  #         args: --file=./frontend/package.json  # Specify the path to the frontend package.json
  #         command: monitor
  #       env:
  #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # SonarQube:
  #   runs-on: ubuntu-latest
  #   needs: ["Snyk"]
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #     - uses: sonarsource/sonarqube-scan-action@master
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #     # If you wish to fail your job when the Quality Gate is red, uncomment the
  #     # following lines. This would typically be used to fail a deployment.
  #     # - uses: sonarsource/sonarqube-quality-gate-action@master
  #     #   timeout-minutes: 5
  #     #   env:
  #     #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Build:
    runs-on: ubuntu-latest
    # needs: ["SonarQube"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            backend/node_modules
            frontend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/*.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
        
      - name: Install Node.js and npm (Backend)
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          args: --file=./backend/package.json
      - name: Build Backend with npm
        run: |
          npm install
          pwd
          ls

      - name: Install Node.js and npm (Frontend)
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          args: --file=./frontend/package.json
      - name: Build Frontend with npm
        run: |
          npm install
          pwd
          ls

  Testing:
    runs-on: ubuntu-latest
    # needs: ["Build"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/*.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
        
      - name: Install Node.js and npm
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          args: --file=./backend/package.json
      - name: Install Jest Package
        run: npm install --save-dev jest
      - name: Run Unit Tests
        run: npm test
